# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  # push:
    # branches: [ main ]
    # tags:
    #   - 'v*'
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
        
      - name: Get the version
        id: get_version
        run: echo "GIT_TAG=`echo $(git describe --tags --abbrev=0)`" >> $GITHUB_ENV

      # - name: Create tag artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{github.ref_name}}
      #     path: Release


      # Generate version based on current date and run number
      - name: Version generator
        id: version-generator
        run: |
          echo ${{ github.run_id }}
          echo ${{ github.run_number }}
          d=$(date +%Y%m%d)
          echo "$d"
          echo "::set-output name=BUILD_NO::${d}_${{ github.run_number }}"

      - name: docker login
        env:
          DOCKER_USER: ${{secrets.DOCKER_USER}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD 

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: andreask81/parser:${{ env.GIT_TAG }}

      # Build and push the PCH Client UI
      - uses: mr-smithers-excellent/docker-build-push@v5
        name: Build & push the PCH Client UI
        with:
          image: andreask81/frontend
          tags: ${{ steps.version-generator.outputs.BUILD_NO }}, latest
          registry: docker.io
          dockerfile: ui/Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          directory: ui

      # Build and push the PCH Client Parser
      - uses: mr-smithers-excellent/docker-build-push@v5
        name: Build & push PCH Client Parser
        with:
          image: andreask81/parser
          tags: ${{ steps.version-generator.outputs.BUILD_NO }}, latest
          registry: docker.io
          dockerfile: parser/Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          directory: parser
          
      # Update the value.yaml with new image tags
      - name: Update files with new image tags
        run: |
          file_to_update="pch-client-chart/values.yaml"
          frontendtag="frontend_tag"
          parsertag="parser_tag"
          sed -i "s/${frontendtag}:.*\$/${frontendtag}: \"${{ steps.version-generator.outputs.BUILD_NO }}\"/g" ${file_to_update}
          sed -i "s/${parsertag}:.*\$/${parsertag}: \"${{ steps.version-generator.outputs.BUILD_NO }}\"/g" ${file_to_update}
          cat $file_to_update
      
      # Start minikube
      - name: Start minikube
        uses: kremmydas/setup-minikube@master
      - name: Wait for 30 seconds for K8s pods to be ready
        run: sleep 30
      # Deploy chart to minikube
      - name: Deploy to minikube
        run: helm install -f pch-client-chart/values.yaml pch-client ./pch-client-chart
      - name: Wait for 60 seconds for app pods to be ready
        run: sleep 60
      - name: Check the pods
        run: kubectl get pods -A
      # Test service URL
      - name: Test service URL using Ingress Controller
        run: | 
          echo $(minikube ip) pchdemo.local | sudo tee -a /etc/hosts
          echo -n "------------------opening the service------------------"
          curl -I -k pchdemo.local
      # Check ixp_server_data table
      - name: Check ixp_server_data table
        run: |
          sleep 60
          kubectl exec $(echo $(kubectl get pods -l app=postgres) | awk '{print $6}') -- sh -c 'psql -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "select * from ixp_server_data;"'
      
      # Commit changes with new version to the current branch
      - name: Commit changes with new version
        uses: EndBug/add-and-commit@v7.2.1 
        with:
          # The name of the branch to use, if different from the one that triggered the workflow.
          # Default: the branch that triggered the run
          # branch: main
          # The message for the commit. The [skip ci] is required for not trigger the CICD
          message: 'Update image with version ${{ steps.version-generator.outputs.BUILD_NO }}'


